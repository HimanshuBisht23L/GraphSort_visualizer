import React, { useRef, useState } from 'react'
import '../styles/Projectpage.css'

export default function ProjectPage() {

    const canva = useRef(null)
    const [startAddVtx, stopAddVtx] = useState(false)
    const [Vertix_data, updateWord] = useState("Add Vertex")
    const [circleArray, setCircleArray] = useState([])
    const [edges, setEdges] = useState([])
    const [addEdgeMode, setAddEdgeMode] = useState(false)
    const [selectedVertices, setSelectedVertices] = useState([])

    function Circle(x, y, radius) {
        this.x = x
        this.y = y
        this.radius = radius

        this.draw = (ptr, i) => {
            ptr.beginPath();
            ptr.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
            ptr.fillStyle = "black"
            ptr.fill()
            ptr.stroke()

            ptr.fillStyle = "white";
            ptr.font = "20px Arial";
            ptr.textAlign = "center";
            ptr.textBaseline = "middle";
            ptr.fillText(i, this.x, this.y);
        }
    }

    function ConnectLine(startCircle, endCircle) {
        this.start = startCircle
        this.end = endCircle

        this.drawLine = (ptr) => {
            ptr.beginPath()
            ptr.moveTo(this.start.x, this.start.y)
            ptr.lineTo(this.end.x, this.end.y)
            ptr.strokeStyle = "black";
            ptr.lineWidth = 2;
            ptr.stroke()
        }
    }

    const getCircle = (e) => {
        const cnva = canva.current;
        let ptr = cnva.getContext("2d");

        const rect = cnva.getBoundingClientRect();
        cnva.width = rect.width;
        cnva.height = rect.height;

        const clickX = e.clientX - rect.left;
        const clickY = e.clientY - rect.top;

        if (addEdgeMode) {
            const clickedCircle = circleArray.find(c => {
                const dx = clickX - c.x;
                const dy = clickY - c.y;
                return Math.sqrt(dx * dx + dy * dy) <= c.radius;
            });

            if (clickedCircle) {
                const newSelection = [...selectedVertices, clickedCircle];
                setSelectedVertices(newSelection);

                if (newSelection.length === 2) {
                    const newLine = new ConnectLine(newSelection[0], newSelection[1]);
                    setEdges(prev => [...prev, newLine]);
                    setSelectedVertices([]);
                }
            }
        } else if (startAddVtx) {
            const circle = new Circle(clickX, clickY, 25);
            const newCircle = [...circleArray, circle];
            setCircleArray(newCircle);
        }

        redrawCanvas();
    }

    const redrawCanvas = () => {
        const cnva = canva.current;
        let ptr = cnva.getContext("2d");

        cnva.width = cnva.getBoundingClientRect().width;
        cnva.height = cnva.getBoundingClientRect().height;

        edges.forEach(edge => edge.drawLine(ptr));

        circleArray.forEach((circle, index) => circle.draw(ptr, index));
    }

    const Make_Vertex = () => {
        stopAddVtx(!startAddVtx);
        updateWord(startAddVtx ? "Add Vertex" : "Stop Adding");
        setAddEdgeMode(false); 
    }

    const toggleEdgeMode = () => {
        setAddEdgeMode(!addEdgeMode);
        setSelectedVertices([]);
        stopAddVtx(false);
        updateWord("Add Vertex");
    }

    const clearTheCanva = () => {
        setCircleArray([]);
        setEdges([]);
        const cnva = canva.current;
        let ptr = cnva.getContext("2d");
        ptr.clearRect(0, 0, cnva.width, cnva.height);
    }

    return (
        <div className="container">

            <canvas
                ref={canva}
                onClick={getCircle}
                className="canvas"
                style={{ border: "1px solid #000000" }}
            />

            <div className="display-panel">
                <div className="top-panel">
                    <h1>Operations</h1>
                    <h1>
                        Mode: <span className="mode-name">{addEdgeMode ? "Add Edge" : startAddVtx ? "Add Vertex" : "Pointer"}</span>
                    </h1>
                </div>
                <div className="operations"></div>
            </div>

            <div className="controls">
                <h2>Controls</h2>

                <div className="right">
                    <form>
                        <label><b>Starting Node</b></label>
                        <input type="text" name="message" className="start-node" />
                    </form>
                </div>

                <div className="left">
                    <button onClick={Make_Vertex} className="vertexButton">{Vertix_data}</button>
                    <button onClick={toggleEdgeMode} className="edgeButton">{addEdgeMode ? "Stop Edge" : "Add Edge"}</button>
                    <button className="bfsButton">BFS</button>
                    <button className="dfsButton">DFS</button>
                    <button onClick={clearTheCanva} className="clearCanvas">Clear Canvas</button>
                </div>
            </div>
        </div>
    )
}



// my
import React, { useRef, useState } from 'react'
import '../styles/Projectpage.css'

export default function ProjectPage() {

    const canva = useRef(null)
    const [startAddVtx, stopAddVtx] = useState(false)
    const [Vertix_data, updateWord] = useState("Add Vertex")
    
    const [circleArray, setCircleArray] = useState([])

    let xpos = undefined
    let ypos = undefined


    function Circle(x, y, radius) {
        this.x = x
        this.y = y
        this.radius = radius

        this.draw = (ptr, i) => {
            ptr.beginPath();
            ptr.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
            ptr.fillStyle = "black"
            ptr.fill()
            ptr.stroke()


            ptr.fillStyle = "white";
            ptr.font = "20px Arial";
            ptr.textAlign = "center"; 
            ptr.textBaseline = "middle";
            ptr.fillText(i, this.x, this.y); 
        }
    }

    function ConnectLine(x, y){
        this.x = x
        this.y = y

        this.drawLine = (ptr)=>{
            ptr.beginPath()
            ptr.moveTo(100, 200)
            ptr.lineTo(this.x, this.y);
            ptr.stroke()
        }
    }


    let i = 1
    const getCircle = (e) => {
        if (!startAddVtx) {
            return;
        }

        const cnva = canva.current;
        let ptr = cnva.getContext("2d");

        const rect = cnva.getBoundingClientRect();
        cnva.width = rect.width;
        cnva.height = rect.height;

        xpos = e.clientX - 12
        ypos = e.clientY - 12

        let circle = new Circle(xpos, ypos, 25)
        const newCircle = [...circleArray, circle]
        setCircleArray(newCircle)

        ptr.clearRect(0, 0, cnva.width, cnva.height);
        
        let Line = new ConnectLine(xpos, ypos);
        Line.drawLine(ptr)

        newCircle.forEach((circle) => circle.draw(ptr, i++));
    }


    const Make_Vertex = ()=>{
        if (startAddVtx == true) {
            updateWord("Add Vertex")
        }
        else {
            updateWord("Stop Adding")
        }
        stopAddVtx(!startAddVtx);
    }


    const clearTheCanva = () => {
        setCircleArray([])
        const cnva = canva.current;
        let ptr = cnva.getContext("2d");
        ptr.clearRect(0, 0, cnva.width, cnva.height);
    };

    return (

        <div className="container">

            <canvas ref={canva} onClick={getCircle} className="canvas" style={{ border: "1px solid #000000" }}>

            </canvas>

            <div className="display-panel">
                <div className="top-panel">
                    <h1>Operations</h1>
                    <h1>
                        Mode: <span className="mode-name">Pointer</span>
                    </h1>
                </div>
                <div className="operations"></div>
            </div>

            <div className="controls">
                <h2>Controls</h2>

                <div className="right">
                    <form>
                        <label><b>Starting Node</b></label>
                        <input type="text" name="message" className="start-node" />
                    </form>
                </div>

                <div className="left">
                    <button onClick={Make_Vertex} className="vertexButton" data-clicked="false">{Vertix_data}</button>
                    <button className="edgeButton" data-clicked="false">Add Edge</button>
                    <button className="bfsButton">BFS</button>
                    <button className="dfsButton">DFS</button>
                    <button onClick={clearTheCanva} className="clearCanvas">Clear Canvas</button>
                </div>

            </div>
        </div>
    )
}





